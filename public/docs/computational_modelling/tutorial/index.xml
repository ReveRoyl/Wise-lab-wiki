<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Wise Lab Wiki</title>
    <link>http://localhost:55331/docs/computational_modelling/tutorial/</link>
    <description>Recent content in Tutorial on Wise Lab Wiki</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) 2020-2024 Hyas</copyright>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:55331/docs/computational_modelling/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Overview</title>
      <link>http://localhost:55331/docs/computational_modelling/tutorial/1.-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55331/docs/computational_modelling/tutorial/1.-overview/</guid>
      <description>This tutorial will take you through the implementation of a commonly-used reinforcement learning model, the Rescorla-Wagner model. We will implement an asymmetric version of this model that allows for differential updating of value estimates in response to positive and negative prediction errors (see here).</description>
    </item>
    <item>
      <title>2. Implementing an update function</title>
      <link>http://localhost:55331/docs/computational_modelling/tutorial/2.-implementing-an-update-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55331/docs/computational_modelling/tutorial/2.-implementing-an-update-function/</guid>
      <description>Implementing an update function First, we need to create a function that implements the core update method for our model (i.</description>
    </item>
    <item>
      <title>3. Selecting actions</title>
      <link>http://localhost:55331/docs/computational_modelling/tutorial/3.-selecting-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55331/docs/computational_modelling/tutorial/3.-selecting-actions/</guid>
      <description>Selecting actions In most learning tasks we are asking participants to select different actions or stimuli based on their estimated value.</description>
    </item>
    <item>
      <title>4. Updating value across trials</title>
      <link>http://localhost:55331/docs/computational_modelling/tutorial/4.-updating-value-across-trials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55331/docs/computational_modelling/tutorial/4.-updating-value-across-trials/</guid>
      <description>Updating value across trials So far, we&amp;rsquo;ve implemented a function that will select an action and update its value estimate based on the reward received for a single trial.</description>
    </item>
    <item>
      <title>5. Running the model for multiple subjects</title>
      <link>http://localhost:55331/docs/computational_modelling/tutorial/5.-running-the-model-for-multiple-subjects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55331/docs/computational_modelling/tutorial/5.-running-the-model-for-multiple-subjects/</guid>
      <description>Updating value across subjects The model we&amp;rsquo;ve implemented so far works for a single subject, but we will typically want to run it for multiple subjects.</description>
    </item>
    <item>
      <title>6. Model fitting using MCMC</title>
      <link>http://localhost:55331/docs/computational_modelling/tutorial/6.-model-fitting-using-mcmc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55331/docs/computational_modelling/tutorial/6.-model-fitting-using-mcmc/</guid>
      <description>Model fitting using MCMC Next, we&amp;rsquo;ll try fitting our model to some simulated data.&#xA;Imports First, we import necessary packages.</description>
    </item>
  </channel>
</rss>
